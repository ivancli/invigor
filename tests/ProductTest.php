<?php

use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;

class ProductTest extends TestCase
{
    var $testProduct = null;

    public function tearDown()
    {
        if (!is_null($this->testProduct)) {
            try {
                $this->testProduct->delete();
            } catch (Exception $e) {

            }
        }
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /**
     * Create Product without name
     * Expect: fail
     */
    public function testCreateProductMissingName()
    {
        $response = $this->call('POST', '/product', [
            'price' => 1.00,
            'description' => 'This is a test product',
            'picture' => base64_encode(file_get_contents(public_path('assets/sample_products/samsung_galaxy_tab.jpg'))),
        ]);
        $this->assertResponseStatus(302);
        $this->assertHasOldInput();
    }

    /**
     * Create Product without price
     * Expect: fail
     */
    public function testCreateProductMissingPrice()
    {
        $response = $this->call('POST', '/product', [
            'name' => 'Test Product 1',
            'description' => 'This is a test product',
            'picture' => base64_encode(file_get_contents(public_path('assets/sample_products/samsung_galaxy_tab.jpg'))),
        ]);
        $this->assertResponseStatus(302);
        $this->assertHasOldInput();
    }

    /**
     * Create Product without description
     * Expect: fail
     */
    public function testCreateProductMissingDescription()
    {
        $response = $this->call('POST', '/product', [
            'name' => 'Test Product 1',
            'price' => 1.00,
            'picture' => base64_encode(file_get_contents(public_path('assets/sample_products/samsung_galaxy_tab.jpg'))),
        ]);
        $this->assertResponseStatus(302);
        $this->assertHasOldInput();
    }

    /**
     * Create Product without picture
     * Expect: fail
     */
    public function testCreateProductMissingPicture()
    {
        $response = $this->call('POST', '/product', [
            'name' => 'Test Product 1',
            'price' => 1.00,
            'description' => 'This is a test product'
        ]);
        $this->assertResponseStatus(302);
        $this->assertHasOldInput();
    }

    /**
     * Create Product
     * Expect: success
     */
    public function testCreateProductSuccess()
    {
        $response = $this->call('POST', '/product', [
            'name' => 'Test Product 1',
            'price' => 1.00,
            'description' => 'This is a test product',
            'picture' => base64_encode(file_get_contents(public_path('assets/sample_products/samsung_galaxy_tab.jpg'))),
        ]);
        $this->assertResponseStatus(302);
    }

    /**
     * Update Product
     * Expect: success
     */
    public function testUpdateProductSuccess()
    {
        $this->testProduct = factory(App\Product::class)->create();
        $updatedName = 'Default test product with name changed';
        $updatedPrice = 99999;
        $updatedDescription = 'Default test product description is changed';
        $response = $this->put('/product/' . $this->testProduct->id, [
            'name' => $updatedName,
            'price' => $updatedPrice,
            'description' => $updatedDescription,
        ]);
        $this->assertResponseStatus(302);
        $product = \App\Product::findOrFail($this->testProduct->id);
        if ($product) {
            $this->assertEquals($product->name, $updatedName);
            $this->assertEquals($product->price, $updatedPrice);
            $this->assertEquals($product->description, $updatedDescription);
            $this->assertEquals($product->picture, $this->testProduct->picture);
        }
    }

    /**
     * Delete Product
     * Expect: success
     */
    public function testDeleteProductSuccess()
    {
        $this->testProduct = factory(App\Product::class)->create();
        $response = $this->delete('/product/' . $this->testProduct->id);
        $this->assertResponseStatus(302);
        try {
            $product = \App\Product::findOrFail($this->testProduct->id);
            $this->assertTrue(false);
        } catch (Exception $e) {
            $this->assertTrue(true);
        }
    }
}
