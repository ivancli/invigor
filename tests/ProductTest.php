<?php

use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;

class ProductTest extends TestCase
{
    var $testProduct = null;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->testProduct = factory(App\Product::class)->make();
        \Illuminate\Support\Facades\Log::info(json_encode($this->testProduct));
    }

    public function testCreateProductMissingName()
    {
        $response = $this->call('POST', '/product', [
            'price' => 1.00,
            'description' => 'This is a test product',
            'picture' => base64_encode(file_get_contents(public_path('assets/sample_products/samsung_galaxy_tab.jpg'))),
        ]);
        $this->assertResponseStatus(302);
        $this->assertHasOldInput();
    }

    public function testCreateProductMissingPrice()
    {
        $response = $this->call('POST', '/product', [
            'name' => 'Test Product 1',
            'description' => 'This is a test product',
            'picture' => base64_encode(file_get_contents(public_path('assets/sample_products/samsung_galaxy_tab.jpg'))),
        ]);
        $this->assertResponseStatus(302);
        $this->assertHasOldInput();
    }

    public function testCreateProductMissingDescription()
    {
        $response = $this->call('POST', '/product', [
            'name' => 'Test Product 1',
            'price' => 1.00,
            'picture' => base64_encode(file_get_contents(public_path('assets/sample_products/samsung_galaxy_tab.jpg'))),
        ]);
        $this->assertResponseStatus(302);
        $this->assertHasOldInput();
    }

    public function testCreateProductMissingPicture()
    {
        $response = $this->call('POST', '/product', [
            'name' => 'Test Product 1',
            'price' => 1.00,
            'description' => 'This is a test product'
        ]);
        $this->assertResponseStatus(302);
        $this->assertHasOldInput();
    }

    public function testCreateProductSuccess()
    {
        $response = $this->call('POST', '/product', [
            'name' => 'Test Product 1',
            'price' => 1.00,
            'description' => 'This is a test product',
            'picture' => base64_encode(file_get_contents(public_path('assets/sample_products/samsung_galaxy_tab.jpg'))),
        ]);
        $this->assertResponseStatus(302);
    }

    public function testUpdateProductSuccess()
    {
        $updatedName = 'Default test product with name changed';
        $updatedPrice = 99999;
        $updatedDescription = 'Default test product description is changed';
        \Illuminate\Support\Facades\Log::info($this->testProduct->id);
        $response = $this->put('/product/' . $this->testProduct->id, [
            'name' => $updatedName,
            'price' => $updatedPrice,
            'description' => $updatedDescription,
        ]);
        $this->assertResponseStatus(302);
        $product = \App\Product::findOrFail($this->testProduct->id);
        if ($product) {
            $this->assertEquals($product->name, $updatedName);
            $this->assertEquals($product->price, $updatedPrice);
            $this->assertEquals($product->description, $updatedDescription);
            $this->assertEquals($product->picture, $this->testProduct->picture);
        }
    }
}
